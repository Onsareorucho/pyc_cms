import React, { useState, useEffect } from 'react';
import { Calendar, Music, Image, Plus, Edit, Trash2, Save, X, Upload, Sparkles, Heart, Star } from 'lucide-react';

const API_BASE = 'https://your-api-domain.com';

const CMS = () => {
  const [activeSection, setActiveSection] = useState('events');
  const [events, setEvents] = useState([]);
  const [music, setMusic] = useState([]);
  const [galleries, setGalleries] = useState([]);
  const [loading, setLoading] = useState(false);
  const [mounted, setMounted] = useState(false);

  // Form states
  const [showEventForm, setShowEventForm] = useState(false);
  const [showMusicForm, setShowMusicForm] = useState(false);
  const [showGalleryForm, setShowGalleryForm] = useState(false);
  const [editingItem, setEditingItem] = useState(null);

  // Form data
  const [eventForm, setEventForm] = useState({
    name: '',
    short_description: '',
    long_description: '',
    category: '',
    start_time: '',
    end_time: '',
    location: '',
    link_to_image: ''
  });

  const [musicForm, setMusicForm] = useState({
    title: '',
    cover_image: '',
    link_to_music: '',
    category: '',
    media_type: 'audio',
    description: '',
    artist: '',
    duration: ''
  });

  const [galleryForm, setGalleryForm] = useState({
    name: '',
    description: '',
    cover_image: null
  });

  const [galleryImages, setGalleryImages] = useState([]);

  useEffect(() => {
    setMounted(true);
    if (activeSection === 'events') fetchEvents();
    if (activeSection === 'music') fetchMusic();
    if (activeSection === 'galleries') fetchGalleries();
  }, [activeSection]);

  // Fetch data functions
  const fetchEvents = async () => {
    try {
      const response = await fetch(`${API_BASE}/api/events`);
      const data = await response.json();
      setEvents(data || []);
    } catch (error) {
      console.error('Error fetching events:', error);
      setEvents([]);
    }
  };

  const fetchMusic = async () => {
    try {
      const response = await fetch(`${API_BASE}/api/music`);
      const data = await response.json();
      setMusic(data || []);
    } catch (error) {
      console.error('Error fetching music:', error);
      setMusic([]);
    }
  };

  const fetchGalleries = async () => {
    try {
      const response = await fetch(`${API_BASE}/api/galleries`);
      const data = await response.json();
      setGalleries(data || []);
    } catch (error) {
      console.error('Error fetching galleries:', error);
      setGalleries([]);
    }
  };

  // Event handlers
  const handleEventSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    
    try {
      const url = editingItem ? 
        `${API_BASE}/api/events/${editingItem.id}` : 
        `${API_BASE}/api/events`;
      
      const method = editingItem ? 'PUT' : 'POST';
      
      const response = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(eventForm)
      });

      if (response.ok) {
        setShowEventForm(false);
        setEditingItem(null);
        setEventForm({
          name: '',
          short_description: '',
          long_description: '',
          category: '',
          start_time: '',
          end_time: '',
          location: '',
          link_to_image: ''
        });
        fetchEvents();
      }
    } catch (error) {
      console.error('Error saving event:', error);
    }
    
    setLoading(false);
  };

  const handleMusicSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    
    try {
      const url = editingItem ? 
        `${API_BASE}/api/music/${editingItem.id}` : 
        `${API_BASE}/api/music`;
      
      const method = editingItem ? 'PUT' : 'POST';
      
      const response = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          ...musicForm,
          duration: musicForm.duration ? parseInt(musicForm.duration) : null
        })
      });

      if (response.ok) {
        setShowMusicForm(false);
        setEditingItem(null);
        setMusicForm({
          title: '',
          cover_image: '',
          link_to_music: '',
          category: '',
          media_type: 'audio',
          description: '',
          artist: '',
          duration: ''
        });
        fetchMusic();
      }
    } catch (error) {
      console.error('Error saving music:', error);
    }
    
    setLoading(false);
  };

  const handleGallerySubmit = async (e) => {
    e.preventDefault();
    setLoading(true);

    try {
      const formData = new FormData();
      formData.append('name', galleryForm.name);
      formData.append('description', galleryForm.description);
      if (galleryForm.cover_image) {
        formData.append('cover_image', galleryForm.cover_image);
      }

      const response = await fetch(`${API_BASE}/api/gallery`, {
        method: 'POST',
        body: formData
      });

      if (response.ok) {
        const newGallery = await response.json();
        
        if (galleryImages.length > 0) {
          const imageFormData = new FormData();
          galleryImages.forEach(file => {
            imageFormData.append('files', file);
          });

          await fetch(`${API_BASE}/api/gallery/${newGallery.id}/images`, {
            method: 'POST',
            body: imageFormData
          });
        }

        setShowGalleryForm(false);
        setGalleryForm({ name: '', description: '', cover_image: null });
        setGalleryImages([]);
        fetchGalleries();
      }
    } catch (error) {
      console.error('Error saving gallery:', error);
    }
    
    setLoading(false);
  };

  const handleDelete = async (type, id) => {
    if (!confirm('Are you sure you want to delete this item?')) return;
    
    setLoading(true);
    
    try {
      const response = await fetch(`${API_BASE}/api/${type}/${id}`, {
        method: 'DELETE'
      });

      if (response.ok) {
        if (type === 'events') fetchEvents();
        if (type === 'music') fetchMusic();
        if (type === 'gallery') fetchGalleries();
      }
    } catch (error) {
      console.error('Error deleting item:', error);
    }
    
    setLoading(false);
  };

  const startEdit = (type, item) => {
    setEditingItem(item);
    
    if (type === 'event') {
      setEventForm({
        name: item.name || '',
        short_description: item.short_description || '',
        long_description: item.long_description || '',
        category: item.category || '',
        start_time: item.start_time ? new Date(item.start_time).toISOString().slice(0, 16) : '',
        end_time: item.end_time ? new Date(item.end_time).toISOString().slice(0, 16) : '',
        location: item.location || '',
        link_to_image: item.link_to_image || ''
      });
      setShowEventForm(true);
    }
    
    if (type === 'music') {
      setMusicForm({
        title: item.title || '',
        cover_image: item.cover_image || '',
        link_to_music: item.link_to_music || '',
        category: item.category || '',
        media_type: item.media_type || 'audio',
        description: item.description || '',
        artist: item.artist || '',
        duration: item.duration || ''
      });
      setShowMusicForm(true);
    }
  };

  const handleImageUpload = (files) => {
    const fileArray = Array.from(files);
    setGalleryImages(prev => [...prev, ...fileArray]);
  };

  // Floating particles component
  const FloatingParticles = () => (
    <div className="fixed inset-0 pointer-events-none overflow-hidden">
      {[...Array(12)].map((_, i) => (
        <div
          key={i}
          className="absolute opacity-20 transition-all duration-1000"
          style={{
            left: `${Math.random() * 100}%`,
            top: `${Math.random() * 100}%`,
            animation: `float ${8 + Math.random() * 6}s ease-in-out infinite`,
            animationDelay: `${Math.random() * 10}s`
          }}
        >
          {i % 3 === 0 ? (
            <Sparkles className="w-6 h-6 text-white" />
          ) : i % 3 === 1 ? (
            <Heart className="w-5 h-5 text-orange-300" />
          ) : (
            <Star className="w-4 h-4 text-green-300" />
          )}
        </div>
      ))}
    </div>
  );

  return (
    <div className="min-h-screen relative overflow-hidden">
      {/* Animated Background */}
      <div className="fixed inset-0 bg-gradient-to-br from-blue-900 via-purple-900 to-blue-800">
        <div className="absolute inset-0 bg-gradient-to-tr from-orange-500/20 via-transparent to-green-500/20"></div>
        <div className="absolute inset-0">
          <div className="absolute top-0 left-1/4 w-96 h-96 bg-orange-500/10 rounded-full blur-3xl animate-pulse" style={{animationDuration: '4s'}}></div>
          <div className="absolute bottom-0 right-1/4 w-96 h-96 bg-green-500/10 rounded-full blur-3xl animate-pulse" style={{animationDuration: '5s', animationDelay: '1s'}}></div>
          <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-blue-500/10 rounded-full blur-3xl animate-pulse" style={{animationDuration: '6s', animationDelay: '2s'}}></div>
        </div>
      </div>

      <FloatingParticles />

      <div className={`relative z-10 container mx-auto px-4 py-8 transition-all duration-1000 ${
        mounted ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'
      }`}>
        {/* Hero Header */}
        <div className="text-center mb-12 relative">
          <div className="inline-block relative">
            <h1 className="text-6xl md:text-8xl font-black text-transparent bg-clip-text bg-gradient-to-r from-white via-orange-200 to-green-200 mb-6 tracking-tight">
              PYC
            </h1>
            <div className="absolute -top-4 -right-4">
              <Sparkles className="w-8 h-8 text-orange-400 animate-spin" style={{animationDuration: '3s'}} />
            </div>
          </div>
          <p className="text-2xl md:text-3xl font-bold text-white mb-4">
            Church Content Management
          </p>
          <div className="w-32 h-1 bg-gradient-to-r from-orange-400 to-green-400 mx-auto rounded-full animate-pulse"></div>
        </div>

        {/* Navigation */}
        <div className="flex justify-center mb-12" style={{ animation: 'fadeInUp 0.8s ease-out 0.3s both' }}>
          <nav className="flex space-x-2 p-2 rounded-2xl backdrop-blur-xl bg-white/10 border border-white/20 shadow-2xl">
            {[
              { id: 'events', label: 'Events', icon: Calendar, color: 'from-blue-500 to-cyan-500' },
              { id: 'music', label: 'Music', icon: Music, color: 'from-orange-500 to-red-500' },
              { id: 'galleries', label: 'Galleries', icon: Image, color: 'from-green-500 to-emerald-500' }
            ].map(section => {
              const Icon = section.icon;
              return (
                <button
                  key={section.id}
                  onClick={() => setActiveSection(section.id)}
                  className={`relative overflow-hidden flex items-center px-8 py-4 rounded-xl font-bold transition-all duration-500 transform hover:scale-105 ${
                    activeSection === section.id
                      ? 'bg-white text-gray-900 shadow-2xl scale-105'
                      : 'text-white hover:bg-white/10'
                  }`}
                >
                  {activeSection === section.id && (
                    <div className={`absolute inset-0 bg-gradient-to-r ${section.color} opacity-10 animate-pulse`}></div>
                  )}
                  <Icon className="w-5 h-5 mr-3" />
                  {section.label}
                  {activeSection === section.id && (
                    <div className="absolute bottom-0 left-0 right-0 h-1 bg-gradient-to-r from-orange-400 to-green-400" style={{animation: 'slideIn 0.3s ease-out'}}></div>
                  )}
                </button>
              );
            })}
          </nav>
        </div>

        {/* Main Content */}
        <div className="backdrop-blur-xl bg-white/95 rounded-3xl shadow-2xl overflow-hidden border border-white/20" style={{ animation: 'fadeInUp 0.8s ease-out 0.6s both' }}>
          {/* Events Section */}
          {activeSection === 'events' && (
            <div className="p-8">
              <div className="flex justify-between items-center mb-8">
                <div className="flex items-center space-x-4">
                  <div className="p-3 rounded-xl bg-gradient-to-r from-blue-500 to-cyan-500 text-white">
                    <Calendar className="w-8 h-8" />
                  </div>
                  <div>
                    <h2 className="text-3xl font-bold text-gray-800">Events Management</h2>
                    <p className="text-gray-600">Create and manage church events</p>
                  </div>
                </div>
                <button
                  onClick={() => setShowEventForm(true)}
                  className="group relative overflow-hidden flex items-center px-6 py-3 rounded-xl bg-gradient-to-r from-orange-500 to-red-500 text-white font-bold shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105"
                >
                  <div className="absolute inset-0 bg-white/20 translate-x-full group-hover:translate-x-0 transition-transform duration-300"></div>
                  <Plus className="w-5 h-5 mr-2 relative z-10" />
                  <span className="relative z-10">Add Event</span>
                </button>
              </div>

              {/* Events List */}
              <div className="grid gap-6">
                {events.map((event, index) => (
                  <div
                    key={event.id}
                    className="group bg-white rounded-2xl p-6 shadow-lg hover:shadow-2xl transition-all duration-500 transform hover:-translate-y-2 border border-gray-100"
                    style={{ animation: `slideInLeft 0.6s ease-out ${index * 0.1}s both` }}
                  >
                    <div className="flex justify-between items-start">
                      <div className="flex-1">
                        <div className="flex items-center space-x-3 mb-3">
                          <div className="w-3 h-3 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 animate-pulse"></div>
                          <h3 className="text-xl font-bold text-gray-800 group-hover:text-blue-600 transition-colors">
                            {event.name}
                          </h3>
                        </div>
                        <p className="text-gray-600 mb-4 leading-relaxed">{event.short_description}</p>
                        <div className="flex flex-wrap gap-4">
                          <span className="px-3 py-1 rounded-full bg-blue-100 text-blue-800 text-sm font-medium">
                            {event.category}
                          </span>
                          <span className="flex items-center text-gray-500 text-sm">
                            📍 {event.location}
                          </span>
                          {event.start_time && (
                            <span className="flex items-center text-gray-500 text-sm">
                              📅 {new Date(event.start_time).toLocaleDateString()}
                            </span>
                          )}
                        </div>
                      </div>
                      <div className="flex space-x-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                        <button
                          onClick={() => startEdit('event', event)}
                          className="p-3 rounded-xl bg-blue-50 hover:bg-blue-100 text-blue-600 transition-colors duration-200 transform hover:scale-110"
                        >
                          <Edit className="w-4 h-4" />
                        </button>
                        <button
                          onClick={() => handleDelete('events', event.id)}
                          className="p-3 rounded-xl bg-red-50 hover:bg-red-100 text-red-600 transition-colors duration-200 transform hover:scale-110"
                        >
                          <Trash2 className="w-4 h-4" />
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Music Section */}
          {activeSection === 'music' && (
            <div className="p-8">
              <div className="flex justify-between items-center mb-8">
                <div className="flex items-center space-x-4">
                  <div className="p-3 rounded-xl bg-gradient-to-r from-orange-500 to-red-500 text-white">
                    <Music className="w-8 h-8" />
                  </div>
                  <div>
                    <h2 className="text-3xl font-bold text-gray-800">Music Management</h2>
                    <p className="text-gray-600">Manage worship songs and audio content</p>
                  </div>
                </div>
                <button
                  onClick={() => setShowMusicForm(true)}
                  className="group relative overflow-hidden flex items-center px-6 py-3 rounded-xl bg-gradient-to-r from-green-500 to-emerald-500 text-white font-bold shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105"
                >
                  <div className="absolute inset-0 bg-white/20 translate-x-full group-hover:translate-x-0 transition-transform duration-300"></div>
                  <Plus className="w-5 h-5 mr-2 relative z-10" />
                  <span className="relative z-10">Add Music</span>
                </button>
              </div>

              {/* Music List */}
              <div className="grid gap-6">
                {music.map((item, index) => (
                  <div
                    key={item.id}
                    className="group bg-white rounded-2xl p-6 shadow-lg hover:shadow-2xl transition-all duration-500 transform hover:-translate-y-2 border border-gray-100"
                    style={{ animation: `slideInRight 0.6s ease-out ${index * 0.1}s both` }}
                  >
                    <div className="flex justify-between items-start">
                      <div className="flex space-x-4 flex-1">
                        {item.cover_image && (
                          <img
                            src={item.cover_image}
                            alt={item.title}
                            className="w-16 h-16 rounded-xl object-cover shadow-md"
                          />
                        )}
                        <div className="flex-1">
                          <div className="flex items-center space-x-3 mb-3">
                            <div className="w-3 h-3 rounded-full bg-gradient-to-r from-orange-500 to-red-500 animate-pulse"></div>
                            <h3 className="text-xl font-bold text-gray-800 group-hover:text-orange-600 transition-colors">
                              {item.title}
                            </h3>
                          </div>
                          <p className="text-gray-600 mb-4 leading-relaxed">{item.description}</p>
                          <div className="flex flex-wrap gap-4">
                            {item.artist && (
                              <span className="px-3 py-1 rounded-full bg-orange-100 text-orange-800 text-sm font-medium">
                                🎤 {item.artist}
                              </span>
                            )}
                            <span className="px-3 py-1 rounded-full bg-purple-100 text-purple-800 text-sm font-medium">
                              {item.media_type}
                            </span>
                            {item.category && (
                              <span className="px-3 py-1 rounded-full bg-green-100 text-green-800 text-sm font-medium">
                                {item.category}
                              </span>
                            )}
                            {item.duration && (
                              <span className="flex items-center text-gray-500 text-sm">
                                ⏱️ {item.duration}s
                              </span>
                            )}
                          </div>
                        </div>
                      </div>
                      <div className="flex space-x-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                        <button
                          onClick={() => startEdit('music', item)}
                          className="p-3 rounded-xl bg-orange-50 hover:bg-orange-100 text-orange-600 transition-colors duration-200 transform hover:scale-110"
                        >
                          <Edit className="w-4 h-4" />
                        </button>
                        <button
                          onClick={() => handleDelete('music', item.id)}
                          className="p-3 rounded-xl bg-red-50 hover:bg-red-100 text-red-600 transition-colors duration-200 transform hover:scale-110"
                        >
                          <Trash2 className="w-4 h-4" />
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Galleries Section */}
          {activeSection === 'galleries' && (
            <div className="p-8">
              <div className="flex justify-between items-center mb-8">
                <div className="flex items-center space-x-4">
                  <div className="p-3 rounded-xl bg-gradient-to-r from-green-500 to-emerald-500 text-white">
                    <Image className="w-8 h-8" />
                  </div>
                  <div>
                    <h2 className="text-3xl font-bold text-gray-800">Gallery Management</h2>
                    <p className="text-gray-600">Organize and showcase church photos</p>
                  </div>
                </div>
                <button
                  onClick={() => setShowGalleryForm(true)}
                  className="group relative overflow-hidden flex items-center px-6 py-3 rounded-xl bg-gradient-to-r from-blue-500 to-cyan-500 text-white font-bold shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105"
                >
                  <div className="absolute inset-0 bg-white/20 translate-x-full group-hover:translate-x-0 transition-transform duration-300"></div>
                  <Plus className="w-5 h-5 mr-2 relative z-10" />
                  <span className="relative z-10">Add Gallery</span>
                </button>
              </div>

              {/* Gallery Grid */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                {galleries.map((gallery, index) => (
                  <div
                    key={gallery.id}
                    className="group bg-white rounded-2xl overflow-hidden shadow-lg hover:shadow-2xl transition-all duration-500 transform hover:-translate-y-2"
                    style={{ animation: `zoomIn 0.5s ease-out ${index * 0.1}s both` }}
                  >
                    <div className="relative overflow-hidden">
                      <img
                        src={gallery.cover_image}
                        alt={gallery.name}
                        className="w-full h-64 object-cover group-hover:scale-110 transition-transform duration-700"
                      />
                      <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                      <div className="absolute top-4 right-4 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                        <button
                          onClick={() => handleDelete('gallery', gallery.id)}
                          className="p-2 rounded-full bg-red-500/80 hover:bg-red-500 text-white transition-colors duration-200 transform hover:scale-110"
                        >
                          <Trash2 className="w-4 h-4" />
                        </button>
                      </div>
                    </div>
                    <div className="p-6">
                      <h3 className="text-xl font-bold text-gray-800 mb-2 group-hover:text-green-600 transition-colors">
                        {gallery.name}
                      </h3>
                      <p className="text-gray-600 leading-relaxed">{gallery.description}</p>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>

        {/* Event Form Modal */}
        {showEventForm && (
          <div className="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center p-4 z-50" style={{animation: 'fadeIn 0.6s ease-out'}}>
            <div className="bg-white rounded-3xl max-w-4xl w-full max-h-[90vh] overflow-y-auto shadow-2xl border border-white/20" style={{animation: 'modalSlideUp 0.4s ease-out'}}>
              <div className="p-8">
                <div className="flex justify-between items-center mb-8">
                  <div className="flex items-center space-x-4">
                    <div className="p-3 rounded-xl bg-gradient-to-r from-blue-500 to-cyan-500 text-white">
                      <Calendar className="w-6 h-6" />
                    </div>
                    <h3 className="text-2xl font-bold text-gray-800">
                      {editingItem ? 'Edit Event' : 'Create New Event'}
                    </h3>
                  </div>
                  <button
                    onClick={() => {
                      setShowEventForm(false);
                      setEditingItem(null);
                    }}
                    className="p-3 hover:bg-gray-100 rounded-xl transition-colors duration-200 transform hover:scale-110"
                  >
                    <X className="w-6 h-6" />
                  </button>
                </div>

                <div onSubmit={handleEventSubmit} className="space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="space-y-2">
                      <label className="block text-sm font-bold text-gray-700">Event Name</label>
                      <input
                        type="text"
                        required
                        value={eventForm.name}
                        onChange={(e) => setEventForm(prev => ({ ...prev, name: e.target.value }))}
                        className="w-full border-2 border-gray-200 rounded-xl px-4 py-3 focus:border-blue-500 focus:ring-4 focus:ring-blue-500/20 transition-all duration-200"
                        placeholder="Enter event name"
                      />
                    </div>
                    <div className="space-y-2">
                      <label className="block text-sm font-bold text-gray-700">Category</label>
                      <input
                        type="text"
                        required
                        value={eventForm.category}
                        onChange={(e) => setEventForm(prev => ({ ...prev, category: e.target.value }))}
                        className="w-full border-2 border-gray-200 rounded-xl px-4 py-3 focus:border-blue-500 focus:ring-4 focus:ring-blue-500/20 transition-all duration-200"
                        placeholder="e.g., Worship, Community, Youth"
                      />
                    </div>
                  </div>

                  <div className="space-y-2">
                    <label className="block text-sm font-bold text-gray-700">Short Description</label>
                    <input
                      type="text"
                      required
                      value={eventForm.short_description}
                      className="w-full border-2 border-gray-200 rounded-xl px-4 py-3 focus:border-blue-500 focus:ring-4 focus:ring-blue-500/20 transition-all duration-200"
                      placeholder="Brief description of the event"
                    />
                  </div>

                  <div className="space-y-2">
                    <label className="block text-sm font-bold text-gray-700">Long Description</label>
                    <textarea
                      value={eventForm.long_description}
                      onChange={(e) => setEventForm(prev => ({ ...prev, long_description: e.target.value }))}
                      rows={4}
                      className="w-full border-2 border-gray-200 rounded-xl px-4 py-3 focus:border-blue-500 focus:ring-4 focus:ring-blue-500/20 transition-all duration-200 resize-none"
                      placeholder="Detailed description of the event"
                    />
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="space-y-2">
                      <label className="block text-sm font-bold text-gray-700">Start Time</label>
                      <input
                        type="datetime-local"
                        required
                        value={eventForm.start_time}
                        onChange={(e) => setEventForm(prev => ({ ...prev, start_time: e.target.value }))}
                        className="w-full border-2 border-gray-200 rounded-xl px-4 py-3 focus:border-blue-500 focus:ring-4 focus:ring-blue-500/20 transition-all duration-200"
                      />
                    </div>
                    <div className="space-y-2">
                      <label className="block text-sm font-bold text-gray-700">End Time</label>
                      <input
                        type="datetime-local"
                        required
                        value={eventForm.end_time}
                        onChange={(e) => setEventForm(prev => ({ ...prev, end_time: e.target.value }))}
                        className="w-full border-2 border-gray-200 rounded-xl px-4 py-3 focus:border-blue-500 focus:ring-4 focus:ring-blue-500/20 transition-all duration-200"
                      />
                    </div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="space-y-2">
                      <label className="block text-sm font-bold text-gray-700">Location</label>
                      <input
                        type="text"
                        required
                        value={eventForm.location}
                        onChange={(e) => setEventForm(prev => ({ ...prev, location: e.target.value }))}
                        className="w-full border-2 border-gray-200 rounded-xl px-4 py-3 focus:border-blue-500 focus:ring-4 focus:ring-blue-500/20 transition-all duration-200"
                        placeholder="Event location"
                      />
                    </div>
                    <div className="space-y-2">
                      <label className="block text-sm font-bold text-gray-700">Image URL</label>
                      <input
                        type="url"
                        value={eventForm.link_to_image}
                        onChange={(e) => setEventForm(prev => ({ ...prev, link_to_image: e.target.value }))}
                        className="w-full border-2 border-gray-200 rounded-xl px-4 py-3 focus:border-blue-500 focus:ring-4 focus:ring-blue-500/20 transition-all duration-200"
                        placeholder="https://example.com/image.jpg"
                      />
                    </div>
                  </div>

                  <div className="flex justify-end space-x-4 pt-6 border-t border-gray-200">
                    <button
                      type="button"
                      onClick={() => {
                        setShowEventForm(false);
                        setEditingItem(null);
                      }}
                      className="px-6 py-3 border-2 border-gray-200 rounded-xl hover:bg-gray-50 font-medium transition-colors duration-200 transform hover:scale-105"
                    >
                      Cancel
                    </button>
                    <button
                      onClick={handleEventSubmit}
                      disabled={loading}
                      className="group relative overflow-hidden flex items-center px-8 py-3 rounded-xl bg-gradient-to-r from-blue-500 to-cyan-500 text-white font-bold shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 disabled:opacity-50"
                    >
                      <div className="absolute inset-0 bg-white/20 translate-x-full group-hover:translate-x-0 transition-transform duration-300"></div>
                      <Save className="w-5 h-5 mr-2 relative z-10" />
                      <span className="relative z-10">{loading ? 'Saving...' : 'Save Event'}</span>
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Music Form Modal */}
        {showMusicForm && (
          <div className="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center p-4 z-50" style={{animation: 'fadeIn 0.6s ease-out'}}>
            <div className="bg-white rounded-3xl max-w-4xl w-full max-h-[90vh] overflow-y-auto shadow-2xl border border-white/20" style={{animation: 'modalSlideUp 0.4s ease-out'}}>
              <div className="p-8">
                <div className="flex justify-between items-center mb-8">
                  <div className="flex items-center space-x-4">
                    <div className="p-3 rounded-xl bg-gradient-to-r from-orange-500 to-red-500 text-white">
                      <Music className="w-6 h-6" />
                    </div>
                    <h3 className="text-2xl font-bold text-gray-800">
                      {editingItem ? 'Edit Music' : 'Add New Music'}
                    </h3>
                  </div>
                  <button
                    onClick={() => {
                      setShowMusicForm(false);
                      setEditingItem(null);
                    }}
                    className="p-3 hover:bg-gray-100 rounded-xl transition-colors duration-200 transform hover:scale-110"
                  >
                    <X className="w-6 h-6" />
                  </button>
                </div>

                <div className="space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="space-y-2">
                      <label className="block text-sm font-bold text-gray-700">Title</label>
                      <input
                        type="text"
                        required
                        value={musicForm.title}
                        onChange={(e) => setMusicForm(prev => ({ ...prev, title: e.target.value }))}
                        className="w-full border-2 border-gray-200 rounded-xl px-4 py-3 focus:border-orange-500 focus:ring-4 focus:ring-orange-500/20 transition-all duration-200"
                        placeholder="Song title"
                      />
                    </div>
                    <div className="space-y-2">
                      <label className="block text-sm font-bold text-gray-700">Artist</label>
                      <input
                        type="text"
                        value={musicForm.artist}
                        onChange={(e) => setMusicForm(prev => ({ ...prev, artist: e.target.value }))}
                        className="w-full border-2 border-gray-200 rounded-xl px-4 py-3 focus:border-orange-500 focus:ring-4 focus:ring-orange-500/20 transition-all duration-200"
                        placeholder="Artist name"
                      />
                    </div>
                  </div>

                  <div className="space-y-2">
                    <label className="block text-sm font-bold text-gray-700">Music Link</label>
                    <input
                      type="url"
                      required
                      value={musicForm.link_to_music}
                      onChange={(e) => setMusicForm(prev => ({ ...prev, link_to_music: e.target.value }))}
                      className="w-full border-2 border-gray-200 rounded-xl px-4 py-3 focus:border-orange-500 focus:ring-4 focus:ring-orange-500/20 transition-all duration-200"
                      placeholder="https://example.com/music.mp3"
                    />
                  </div>

                  <div className="space-y-2">
                    <label className="block text-sm font-bold text-gray-700">Description</label>
                    <textarea
                      value={musicForm.description}
                      onChange={(e) => setMusicForm(prev => ({ ...prev, description: e.target.value }))}
                      rows={3}
                      className="w-full border-2 border-gray-200 rounded-xl px-4 py-3 focus:border-orange-500 focus:ring-4 focus:ring-orange-500/20 transition-all duration-200 resize-none"
                      placeholder="Describe the song or audio content"
                    />
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <div className="space-y-2">
                      <label className="block text-sm font-bold text-gray-700">Media Type</label>
                      <select
                        value={musicForm.media_type}
                        onChange={(e) => setMusicForm(prev => ({ ...prev, media_type: e.target.value }))}
                        className="w-full border-2 border-gray-200 rounded-xl px-4 py-3 focus:border-orange-500 focus:ring-4 focus:ring-orange-500/20 transition-all duration-200"
                      >
                        <option value="audio">Audio</option>
                        <option value="video">Video</option>
                      </select>
                    </div>
                    <div className="space-y-2">
                      <label className="block text-sm font-bold text-gray-700">Category</label>
                      <input
                        type="text"
                        value={musicForm.category}
                        onChange={(e) => setMusicForm(prev => ({ ...prev, category: e.target.value }))}
                        className="w-full border-2 border-gray-200 rounded-xl px-4 py-3 focus:border-orange-500 focus:ring-4 focus:ring-orange-500/20 transition-all duration-200"
                        placeholder="e.g., Worship, Praise"
                      />
                    </div>
                    <div className="space-y-2">
                      <label className="block text-sm font-bold text-gray-700">Duration (seconds)</label>
                      <input
                        type="number"
                        value={musicForm.duration}
                        onChange={(e) => setMusicForm(prev => ({ ...prev, duration: e.target.value }))}
                        className="w-full border-2 border-gray-200 rounded-xl px-4 py-3 focus:border-orange-500 focus:ring-4 focus:ring-orange-500/20 transition-all duration-200"
                        placeholder="180"
                      />
                    </div>
                  </div>

                  <div className="space-y-2">
                    <label className="block text-sm font-bold text-gray-700">Cover Image URL</label>
                    <input
                      type="url"
                      value={musicForm.cover_image}
                      onChange={(e) => setMusicForm(prev => ({ ...prev, cover_image: e.target.value }))}
                      className="w-full border-2 border-gray-200 rounded-xl px-4 py-3 focus:border-orange-500 focus:ring-4 focus:ring-orange-500/20 transition-all duration-200"
                      placeholder="https://example.com/cover.jpg"
                    />
                  </div>

                  <div className="flex justify-end space-x-4 pt-6 border-t border-gray-200">
                    <button
                      type="button"
                      onClick={() => {
                        setShowMusicForm(false);
                        setEditingItem(null);
                      }}
                      className="px-6 py-3 border-2 border-gray-200 rounded-xl hover:bg-gray-50 font-medium transition-colors duration-200 transform hover:scale-105"
                    >
                      Cancel
                    </button>
                    <button
                      onClick={handleMusicSubmit}
                      disabled={loading}
                      className="group relative overflow-hidden flex items-center px-8 py-3 rounded-xl bg-gradient-to-r from-orange-500 to-red-500 text-white font-bold shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 disabled:opacity-50"
                    >
                      <div className="absolute inset-0 bg-white/20 translate-x-full group-hover:translate-x-0 transition-transform duration-300"></div>
                      <Save className="w-5 h-5 mr-2 relative z-10" />
                      <span className="relative z-10">{loading ? 'Saving...' : 'Save Music'}</span>
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Gallery Form Modal */}
        {showGalleryForm && (
          <div className="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center p-4 z-50" style={{animation: 'fadeIn 0.6s ease-out'}}>
            <div className="bg-white rounded-3xl max-w-4xl w-full max-h-[90vh] overflow-y-auto shadow-2xl border border-white/20" style={{animation: 'modalSlideUp 0.4s ease-out'}}>
              <div className="p-8">
                <div className="flex justify-between items-center mb-8">
                  <div className="flex items-center space-x-4">
                    <div className="p-3 rounded-xl bg-gradient-to-r from-green-500 to-emerald-500 text-white">
                      <Image className="w-6 h-6" />
                    </div>
                    <h3 className="text-2xl font-bold text-gray-800">Create New Gallery</h3>
                  </div>
                  <button
                    onClick={() => {
                      setShowGalleryForm(false);
                      setGalleryForm({ name: '', description: '', cover_image: null });
                      setGalleryImages([]);
                    }}
                    className="p-3 hover:bg-gray-100 rounded-xl transition-colors duration-200 transform hover:scale-110"
                  >
                    <X className="w-6 h-6" />
                  </button>
                </div>

                <div className="space-y-6">
                  <div className="space-y-2">
                    <label className="block text-sm font-bold text-gray-700">Gallery Name</label>
                    <input
                      type="text"
                      required
                      value={galleryForm.name}
                      onChange={(e) => setGalleryForm(prev => ({ ...prev, name: e.target.value }))}
                      className="w-full border-2 border-gray-200 rounded-xl px-4 py-3 focus:border-green-500 focus:ring-4 focus:ring-green-500/20 transition-all duration-200"
                      placeholder="Gallery name"
                    />
                  </div>

                  <div className="space-y-2">
                    <label className="block text-sm font-bold text-gray-700">Description</label>
                    <textarea
                      required
                      value={galleryForm.description}
                      onChange={(e) => setGalleryForm(prev => ({ ...prev, description: e.target.value }))}
                      rows={3}
                      className="w-full border-2 border-gray-200 rounded-xl px-4 py-3 focus:border-green-500 focus:ring-4 focus:ring-green-500/20 transition-all duration-200 resize-none"
                      placeholder="Describe this gallery"
                    />
                  </div>

                  <div className="space-y-2">
                    <label className="block text-sm font-bold text-gray-700">Cover Image</label>
                    <input
                      type="file"
                      accept="image/*"
                      onChange={(e) => setGalleryForm(prev => ({ ...prev, cover_image: e.target.files[0] }))}
                      className="w-full border-2 border-gray-200 rounded-xl px-4 py-3 focus:border-green-500 focus:ring-4 focus:ring-green-500/20 transition-all duration-200 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-green-50 file:text-green-700 hover:file:bg-green-100"
                    />
                  </div>

                  <div className="space-y-2">
                    <label className="block text-sm font-bold text-gray-700">Additional Images</label>
                    <div className="border-2 border-dashed border-gray-300 rounded-xl p-8 text-center hover:border-green-400 transition-colors duration-300 bg-gray-50/50">
                      <input
                        type="file"
                        multiple
                        accept="image/*"
                        onChange={(e) => handleImageUpload(e.target.files)}
                        className="hidden"
                        id="gallery-images"
                      />
                      <label
                        htmlFor="gallery-images"
                        className="flex flex-col items-center cursor-pointer group"
                      >
                        <div className="p-4 rounded-full bg-green-100 group-hover:bg-green-200 transition-colors duration-200 mb-4">
                          <Upload className="w-8 h-8 text-green-600" />
                        </div>
                        <span className="text-lg font-semibold text-gray-700 mb-2">Click to upload multiple images</span>
                        <span className="text-sm text-gray-500">PNG, JPG, GIF up to 10MB each</span>
                      </label>
                    </div>

                    {galleryImages.length > 0 && (
                      <div className="mt-6 p-4 bg-green-50 rounded-xl border border-green-200">
                        <p className="text-sm font-bold text-green-800 mb-4">
                          Selected Images ({galleryImages.length})
                        </p>
                        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                          {galleryImages.map((file, index) => (
                            <div key={index} className="relative group">
                              <img
                                src={URL.createObjectURL(file)}
                                alt={`Preview ${index + 1}`}
                                className="w-full h-24 object-cover rounded-lg shadow-md group-hover:shadow-lg transition-shadow duration-200"
                              />
                              <button
                                type="button"
                                onClick={() => setGalleryImages(prev => prev.filter((_, i) => i !== index))}
                                className="absolute -top-2 -right-2 bg-red-500 hover:bg-red-600 text-white rounded-full w-6 h-6 flex items-center justify-center text-xs font-bold shadow-lg transform hover:scale-110 transition-all duration-200"
                              >
                                ×
                              </button>
                              <div className="absolute bottom-1 left-1 right-1 bg-black/60 text-white text-xs px-2 py-1 rounded text-center opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                                {file.name.slice(0, 15)}...
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>

                  <div className="flex justify-end space-x-4 pt-6 border-t border-gray-200">
                    <button
                      type="button"
                      onClick={() => {
                        setShowGalleryForm(false);
                        setGalleryForm({ name: '', description: '', cover_image: null });
                        setGalleryImages([]);
                      }}
                      className="px-6 py-3 border-2 border-gray-200 rounded-xl hover:bg-gray-50 font-medium transition-colors duration-200 transform hover:scale-105"
                    >
                      Cancel
                    </button>
                    <button
                      onClick={handleGallerySubmit}
                      disabled={loading}
                      className="group relative overflow-hidden flex items-center px-8 py-3 rounded-xl bg-gradient-to-r from-green-500 to-emerald-500 text-white font-bold shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 disabled:opacity-50"
                    >
                      <div className="absolute inset-0 bg-white/20 translate-x-full group-hover:translate-x-0 transition-transform duration-300"></div>
                      <Save className="w-5 h-5 mr-2 relative z-10" />
                      <span className="relative z-10">{loading ? 'Creating...' : 'Create Gallery'}</span>
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Loading Overlay */}
        {loading && (
          <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50">
            <div className="bg-white rounded-2xl p-8 flex items-center space-x-4 shadow-2xl" style={{animation: 'pulse 4s ease-in-out infinite'}}>
              <div className="relative">
                <div className="w-8 h-8 border-4 border-blue-200 rounded-full animate-spin"></div>
                <div className="absolute inset-0 w-8 h-8 border-4 border-transparent border-t-blue-600 rounded-full animate-spin"></div>
              </div>
              <span className="text-lg font-semibold text-gray-700">Processing your request...</span>
            </div>
          </div>
        )}
      </div>

      {/* Custom Styles and Animations */}
      <style jsx>{`
        @keyframes float {
          0%, 100% { transform: translateY(0px) rotate(0deg); }
          50% { transform: translateY(-20px) rotate(180deg); }
        }
        
        @keyframes fadeIn {
          from { opacity: 0; }
          to { opacity: 1; }
        }
        
        @keyframes fadeInUp {
          from { opacity: 0; transform: translateY(30px); }
          to { opacity: 1; transform: translateY(0); }
        }
        
        @keyframes slideIn {
          from { transform: translateX(-100%); }
          to { transform: translateX(0); }
        }
        
        @keyframes slideInLeft {
          from { opacity: 0; transform: translateX(-50px); }
          to { opacity: 1; transform: translateX(0); }
        }
        
        @keyframes slideInRight {
          from { opacity: 0; transform: translateX(50px); }
          to { opacity: 1; transform: translateX(0); }
        }
        
        @keyframes zoomIn {
          from { opacity: 0; transform: scale(0.9); }
          to { opacity: 1; transform: scale(1); }
        }
        
        @keyframes modalSlideUp {
          from { opacity: 0; transform: translateY(50px) scale(0.95); }
          to { opacity: 1; transform: translateY(0) scale(1); }
        }

        .container {
          max-width: 1400px;
        }
        
        /* Custom scrollbar */
        .overflow-y-auto::-webkit-scrollbar {
          width: 8px;
        }
        
        .overflow-y-auto::-webkit-scrollbar-track {
          background: rgba(0,0,0,0.1);
          border-radius: 4px;
        }
        
        .overflow-y-auto::-webkit-scrollbar-thumb {
          background: linear-gradient(45deg, hsl(210 100% 25%), hsl(25 100% 55%));
          border-radius: 4px;
        }
        
        .overflow-y-auto::-webkit-scrollbar-thumb:hover {
          background: linear-gradient(45deg, hsl(210 100% 35%), hsl(25 100% 65%));
        }

        /* Glassmorphism effect */
        .backdrop-blur-xl {
          backdrop-filter: blur(20px);
          -webkit-backdrop-filter: blur(20px);
        }

        /* Enhanced focus styles */
        input:focus, textarea:focus, select:focus {
          outline: none;
          transform: translateY(-2px);
          box-shadow: 0 8px 25px rgba(0,0,0,0.15);
        }

        /* Button press animation */
        button:active {
          transform: translateY(1px) scale(0.98);
        }

        /* Card hover glow effect */
        .group:hover {
          box-shadow: 0 20px 40px rgba(0,0,0,0.1), 0 0 0 1px rgba(255,255,255,0.1);
        }

        /* File input styling */
        input[type="file"]::file-selector-button {
          transition: all 0.3s ease;
        }

        input[type="file"]:hover::file-selector-button {
          transform: translateY(-2px);
          box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        }
      `}</style>
    </div>
  );
};

export default CMS;